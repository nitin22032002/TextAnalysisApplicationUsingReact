{"version":3,"sources":["component/FormPage.js","component/Navbar.js","component/Alert.js","component/AboutUs.js","App.js","reportWebVitals.js","index.js"],"names":["FormPage","props","useState","getText","setText","handleRemove","a","newText","count","array","split","index","length","element","alert","className","style","backgroundColor","colorMode","color","id","value","onChange","event","target","rows","disabled","toUpperCase","onClick","toLowerCase","charCodeAt","String","fromCodePoint","prompt","b","c","indexOf","d","replace","Navbar","to","title","type","a1","a2","mode","htmlFor","Alert","height","marginBottom","role","message","defaultProps","AboutUs","borderStyle","border","borderColor","App","getMode","setMode","getAlert","setAlert","showAlert","setTimeout","toggleMode","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.200cfba1.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function FormPage(props) {\r\n    const [getText,setText]=useState(\"\");\r\n    const handleSwapCase=()=>{\r\n        let newText=\"\"\r\n        for (let index = 0; index < getText.length; index++) {\r\n            const element = getText.charCodeAt(index)\r\n            if(element>=65 && element<=90){\r\n                newText+=String.fromCodePoint(element+32)\r\n            }\r\n            else if(element>=97 && element<=122){\r\n                newText+=String.fromCodePoint(element-32)\r\n            }\r\n            else{\r\n                newText+=getText[index];\r\n            }\r\n            \r\n        }\r\n        setText(newText);\r\n        props.alert(\"Character Case Swaped\",\"success\")\r\n    }\r\n    const handleReverse=()=>{\r\n        if(getText.length===0){props.alert(\"Failed to reverse the text\",\"danger\")}\r\n        else{\r\n        let newText=\"\"\r\n        for (let index = getText.length-1; index >=0 ; index--) {\r\n            newText+=getText[index]\r\n        }\r\n        setText(newText)\r\n        props.alert(\"Text Reversed\",\"success\")\r\n    }}\r\n    const handleReplace=()=>{\r\n        let a=prompt(\"Enter Word Or Character You Want To Replace\")\r\n        if(a!==\"\" && getText.length!==0){\r\n        let b=prompt(\"Enter New Word Or Character \")\r\n        let c=getText\r\n        while(c.indexOf(a)!==-1 && a!==\"\"){\r\n            var d=c.indexOf(a)\r\n            c=c.replace(a,b)\r\n            if(c.indexOf(a)===d){break}\r\n        }\r\n        setText(c)\r\n        props.alert(\"Word or Character Replaced\",\"success\")\r\n    }\r\n    else{props.alert(\"Failed to Replace the Word\",\"danger\")}\r\n    }\r\n    const handleRemove=(a)=>{\r\n        let newText=\"\"\r\n        let count=0\r\n        let array=getText.split(\" \")\r\n        let index=0;\r\n        for (index = 0; index < array.length-1; index++) {\r\n            const element = array[index];\r\n            if(element!==\"\"){\r\n                newText+=(element+\" \")\r\n                count+=1\r\n            }\r\n            \r\n        }\r\n        if(array[index]!==\"\"){\r\n            newText+=array[index]\r\n            count+=1\r\n        }\r\n        if(a===1){\r\n          setText(newText);\r\n          props.alert(\"Extra Space Removed\",\"success\")\r\n        }\r\n        else{\r\n           return count;\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n    <div className=\"container my-3\">\r\n        <h2 className=\"my-3\">Write Your Text Below To Analise It</h2>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" style={{backgroundColor:props.colorMode===\"dark\"?\"#8e8a8a\":\"white\",color:props.colorMode===\"dark\"?\"white\":\"black\"}} id=\"exampleFormControlTextarea1\" value={getText} onChange={(event)=>setText(event.target.value)} rows=\"10\"></textarea>\r\n        </div>\r\n        <div className=\"container my-2\">\r\n            <button disabled={getText.length===0 || getText.toUpperCase()===getText} className=\"btn btn-primary mx-2\" onClick={()=>{setText(getText.toUpperCase());props.alert(\"Converted To UpperCase\",\"success\")}}>Convert To UpperCase</button>\r\n            <button disabled={getText.length===0 || getText.toLowerCase()===getText} className=\"btn btn-primary mx-2\" onClick={()=>{setText(getText.toLowerCase());props.alert(\"Converted To LowerCase\",\"success\")}}>Convert To LowerCase</button>\r\n            <button disabled={getText.length===0} className=\"btn btn-primary mx-2\" onClick={handleSwapCase}>Swap The Case</button>\r\n            <button disabled={getText.length===0} className=\"btn btn-primary mx-2\" onClick={handleReverse}>Reverse The Text</button>\r\n            <button disabled={getText.length===0} className=\"btn btn-primary mx-2\" onClick={handleReplace}>Replace</button>\r\n            <button disabled={getText.length===0} className=\"btn btn-primary mx-2\" onClick={()=>handleRemove(1)}>Remove Extra spaces</button>\r\n            <button disabled={getText.length===0} className=\"btn btn-primary mx-2\" onClick={()=>{setText(\"\");props.alert(\"Text Clear\",\"success\")}}>Clear</button>\r\n        </div>\r\n    </div>\r\n    <div className=\"container my-2\">\r\n        <h2>Text Analysis Here</h2>\r\n        <b className=\"my-3\"><i>Words <u>{handleRemove(0)}</u></i></b> \r\n        <b className=\"mx-3 my-3\"><i>Character <u>{getText.length}</u></i></b>\r\n        <b className=\"mx-3 my-3\"><i>Time Required To Read This Text <u>{handleRemove(0)*(1/125)} Minutes</u></i></b>\r\n        <h3 className=\"my-3\">Text Preview Here</h3>\r\n        <p>{getText.length?getText:\"Write Text Above For Preview\"}</p>\r\n    </div>\r\n    </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.colorMode} bg-${props.colorMode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/TextAnalysisApplicationUsingReact/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" to=\"/TextAnalysisApplicationUsingReact/home\" aria-current=\"page\">{props.a1}</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/TextAnalysisApplicationUsingReact/about\">{props.a2}</Link>\r\n        </li>\r\n      </ul>\r\n\r\n      <div className=\"form-check form-switch mx-3\">\r\n  <input className=\"form-check-input\" onClick={()=>props.mode()} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" style={{color:props.colorMode!==\"dark\"?\"black\":\"white\"}} htmlFor=\"flexSwitchCheckDefault\">{props.colorMode===\"dark\"?\"Light\":\"Dark\"} Mode Enable</label>\r\n</div>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    )\r\n}\r\nNavbar.propTypes={title:PropTypes.string.isRequired,a1:PropTypes.string,a2:PropTypes.string}\r\nNavbar.defaultProps={a1:\"Home\",a2:\"About Us\"}","import React from 'react'\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{height:20,marginBottom:50}}>\r\n\r\n    {props.alert && <div className={`alert alert-${props.alert.type}`}  role=\"alert\">\r\n          <strong>{props.alert.message}</strong>\r\n    </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function AboutUs(props) {\r\n    let borderStyle={border:\"2px solid\",borderColor:props.colorMode===\"dark\"?\"white\":\"black\",backgroundColor:props.colorMode===\"dark\"?\"black\":\"white\",color:props.colorMode===\"dark\"?\"white\":\"black\"}\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\" >\r\n                <div className=\"accordion-item\" style={borderStyle}>\r\n                    <h2 className={`accordion-header ${props.colorMode}`} id=\"flush-headingOne\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseOne\" aria-expanded=\"false\" aria-controls=\"flush-collapseOne\">\r\n                            About TextUtils\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"flush-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingOne\" data-bs-parent=\"#accordionFlushExample\">\r\n                        <div className=\"accordion-body\">It is Text Analyser here you can analyse your text like character count , word count and swap their case also many thing you can do with text try it.</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={borderStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"flush-headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseTwo\" aria-expanded=\"false\" aria-controls=\"flush-collapseTwo\">\r\n                            Free To Use\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"flush-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingTwo\" data-bs-parent=\"#accordionFlushExample\">\r\n                        <div className=\"accordion-body\">It is Text Anayser it is free of cost and platform independent </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import FormPage from './component/FormPage';\nimport Navbar from './component/Navbar';\nimport {useState} from 'react'\nimport Alert from './component/Alert'\nimport { BrowserRouter as Router,Switch,Route } from 'react-router-dom';\nimport AboutUs from './component/AboutUs';\nfunction App(props) {\n  const [getMode,setMode]=useState(\"light\")\n  const [getAlert,setAlert]=useState(null)\n  const showAlert=(message,type)=>{\n    setAlert({message:message,type:type});\n    setTimeout(() => {\n        setAlert(null)\n      }, 1500);\n  }\n  const toggleMode=()=>{\n    if(getMode===\"light\"){\n      setMode(\"dark\")\n      showAlert(\"Dark Mode Enable\",\"success\")\n    }\n    else{\n      setMode(\"light\")\n      showAlert(\"Light Mode Enable\",\"success\")\n    }\n  }\n  document.body.style.backgroundColor=(getMode===\"dark\"?\"#222f3e\":'white')\n  document.body.style.color=(getMode===\"dark\"?\"white\":'black')\n  return (\n    <>\n      <Router>\n      <Navbar title=\"TextUtils\" mode={toggleMode} colorMode={getMode} />\n      <Alert alert={getAlert} />\n        <Switch>\n<Route exact path=\"/TextAnalysisApplicationUsingReact/\" >\n      <FormPage mode={toggleMode} colorMode={getMode}  alert={showAlert}/>\n</Route>\n<Route exact path=\"/TextAnalysisApplicationUsingReact/home\" >\n      <FormPage mode={toggleMode} colorMode={getMode}  alert={showAlert}/>\n</Route>\n<Route exact path=\"/TextAnalysisApplicationUsingReact/about\" >\n      <AboutUs colorMode={getMode}/>\n</Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}